[
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  },
  {
    "device_profile": "I2C DUT",
    "sweep_parameter": "Frequency(Hz)",
    "Last_pass_value": "1000000 Hz",
    "sweep_type": "Nom to Min & Nom to Max",
    "result": "Null",
    "otherDetails": {
      "max": "1700000 Hz",
      "min": "10000 Hz",
      "nominal": "1000000 Hz",
      "coarse_step_value": "25000 Hz",
      "operation": "X <= Min Limit or X >= Max Limit",
      "spec_min": "10000 Hz",
      "spec_max": "1000000 Hz",
      "code": "from Soliton_I3C_TVS_Functions import *\n\n\ndef configure_defualt_I2C_bus_timings():\n    \"\"\"Set a single timing parameter for individual Legacy I2C Timing Parameters Setting functions inorder.\"\"\"\n    setI2C_Frequency(\"1000000\")\n\n\ndef configure_defualt_bus_voltage():\n    \"\"\"set a single voltage parameter for individual Voltage setting functions inorder.\"\"\"\n    setSCL_VIH(\"1.8\")\n    setSCL_VIL(\"0\")\n    setSDA_VIH(\"1.8\")\n    setSDA_VIL(\"0\")\n\n\ndef configure_defualt_I3C_bus_timings():\n    \"\"\"Set a single timing parameter for individual I3C Timing Parameters Setting functions inorder.\"\"\"\n    setI3CFrequency(\"1000000\")\n\n\n# Configure default settings\nconfigure_defualt_bus_voltage()\nconfigure_defualt_I2C_bus_timings()\nconfigure_defualt_I3C_bus_timings()\n\nsetDeviceProfile(\"Simulation\")\n\nfrom Soliton_I3C_TVS_Functions import sdrPrivateRead, sdrPrivateWrite, setI2C_Frequency\n\n# Initialize variables\nregister_address = '52'\nwrite_data = '0x55'\nexclude_i3c_reserved_byte = 'true'\ntiming_measurement = 'false'\nnominal_frequency = 1000000\nmin_frequency = 10000\nmax_frequency = 1700000\ncoarse_step_value = 25000\nspec_min = 10000\nspec_max = 1000000\n\n# Write known data to the register\nwrite_result = sdrPrivateWrite(register_address, write_data, exclude_i3c_reserved_byte)\nif write_result[0] != '1' or write_result[1]['Operation Pass?'] != '1':\n    raise Exception(\"Initial write operation failed\")\n\n# Function to validate read data\n def validate_read_data(read_data):\n    return read_data == write_data\n\n# Sweep from Nominal to Min\nfrequency = nominal_frequency\nwhile frequency >= min_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency <= spec_min:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency -= coarse_step_value\n\n# Sweep from Nominal to Max\nfrequency = nominal_frequency + coarse_step_value\nwhile frequency <= max_frequency:\n    set_result = setI2C_Frequency(str(frequency))\n    if set_result[0] != '1' or set_result[1]['Operation Pass?'] != '1':\n        raise Exception(f\"Failed to set frequency to {frequency} Hz\")\n    read_result = sdrPrivateRead(register_address, exclude_i3c_reserved_byte, timing_measurement)\n    if read_result[0] != '1':\n        raise Exception(f\"Read operation failed at frequency {frequency} Hz\")\n    read_data = read_result[1]['Read Data']\n    if validate_read_data(read_data):\n        print((frequency, \"Pass\"))\n    else:\n        if frequency >= spec_max:\n            print((frequency, \"Pass\"))\n        else:\n            print((frequency, \"Fail\"))\n    frequency += coarse_step_value"
    }
  }
]
